{"version":3,"sources":["logo.svg","components/PostListTutorial.jsx","components/NewPostTutorial.jsx","components/storiesList.js","components/StoryCard.js","actions/likeStoryAction.js","components/header.js","actions/currentUserAction.js","containers/Stories.js","actions/storyAction.js","actions/likeAllOnStoriesFetchAction.js","components/NewComment.js","actions/commentAction.js","components/commentList.js","components/storyShow.js","components/postShow.js","containers/Comments.js","actions/singleStoryAction.js","actions/commentFetchAction.js","actions/singlePostAction.js","components/navbar.js","actions/postCreateAction.js","components/newPost.js","components/PostList.js","components/PostCard.js","actions/likePostAction.js","actions/postDeleteAction.js","actions/postEditAction.js","containers/Posts.js","actions/postsFetchAction.js","components/PostEdit.js","App.js","reducers/index.js","reducers/commentReducer.js","reducers/storyReducer.js","reducers/postReducer.js","reducers/currentUserReducer.js","reducers/likeStoryReducer.js","index.js"],"names":["module","exports","Component","StoriesList","props","className","loading","list","StoryCard","state","vote","item_id","story","id","handleOnClick","event","preventDefault","valueCSRF","document","querySelector","content","setState","likeStory","this","Card","body","to","title","Button","variant","like","onSubmit","type","value","connect","likeStoryReducer","votes","dispatch","fetch","method","headers","JSON","stringify","then","resp","json","payload","catch","error","console","log","message","header","src","logo","alt","username","currentUserFetch","resq","user","Stories","fetchStories","likeAllOnStoriesFetch","stories","map","index","foundLike","allLikes","find","parseInt","key","storyReducer","currentUserReducer","response","storyIds","itemId","likes","NewComment","story_comment","handleOnChange","storyId","target","name","postId","handleOnSubmit","commentUpload","rows","cols","onChange","storyComment","comment","commentList","displayComments","StoryShow","time","timeString","Date","toLocaleString","Header","Text","text","Footer","postShow","post","created_at","Comments","reloadSingleStory","singleStory","comments","filter","story_id","slice","reverse","dateString","toLocaleTimeString","reloadSinglePost","singlePost","post_id","match","path","fetchSingleStory","params","fetchComments","fetchSinglePost","commentReducer","postReducer","Navbar","postUpload","postData","push","res","NewPost","history","userPosts","length","postList","posts","PostCard","voteValue","likePost","handleOnClickDownVote","handleOnClickDelete","deletePost","handleOnClickEdit","editPost","border","Title","postValue","Posts","fetchPosts","sort","p1","p2","postDate","toDateString","PostEdit","App","Container","exact","component","combineReducers","action","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9a3341f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\n\nclass PostListTutorial extends Component {\n\n  state = {\n    posts: []\n  }\n\n  componentDidMount() {\n    fetch('/api/v1/posts')\n      .then(posts => posts.json())\n      .then(posts => {\n        this.setState({\n          posts: posts\n        })\n      })\n  }\n\n  renderPosts = () => {\n    return this.state.posts.map(post => {\n      return (\n        <div key={post.id}>\n          {post.title} - {post.content}\n        </div>\n      )\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        PostList Component test\n        {this.renderPosts()}\n        <hr></hr>\n        <Link to=\"/posts/new\">Add a New Post</Link>\n      </div>\n    )\n  }\n}\n\nexport default PostListTutorial\n","import React, { Component }               from 'react';\n\nclass NewPostTutorial extends Component {\n\n  state = {\n    title: '',\n    content: ''\n  }\n\n  handleChange = e => {\n    let newValue = e.target.value;\n    let key = e.target.name;\n    this.setState({\n      [key]: newValue\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let data = {post: this.state};\n    let token = document.querySelector('meta[name=\"csrf-token\"]').content;\n    fetch('/api/v1/posts', {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'X-Requested-With': 'XMLHttpRequest',\n        'X-CSRF-Token': token\n      },\n      redirect: \"error\",\n      body: JSON.stringify(data)\n    })\n      .then(resp => {\n        resp.json()\n      })\n      .then(post => {\n        this.props.history.push('/');\n      });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit.bind(this)}>\n        <p>\n          <label htmlFor=\"title\">Title: </label>\n          <input type=\"text\" name=\"title\" onChange={this.handleChange} />\n        </p>\n        <p>\n          <label htmlFor=\"content\">Content: </label>\n          <textarea name=\"content\" id=\"\" cols=\"30\" rows=\"10\" onChange={this.handleChange}></textarea>\n        </p>\n        <input type=\"submit\" value=\"Create Post\" />\n      </form>\n    )\n  }\n}\n\nexport default NewPostTutorial\n","import React from 'react'\n\nexport default function StoriesList(props) {\n  return (\n    <div className={\"story-cards\"}>\n      {/*\n        <h4 style={{ borderTop: '2px solid black', paddingBottom: '10px', marginBottom: '12px' }}> </h4>\n      */}\n      <ol>\n        {props.loading ? \"...Stories Loading\" : props.list}\n      </ol>\n    </div>\n  )\n}\n","import React, { Component } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\nimport { likeStory } from '../actions/likeStoryAction';\nimport { connect } from 'react-redux';\n\nclass StoryCard extends Component{\n  state = {\n    vote: 0,\n    item_id: (this.props.story ? this.props.story.id : -1)\n  }\n\n  handleOnClick = event => {\n    event.preventDefault();\n    let valueCSRF = document.querySelector('meta[name=\"csrf-token\"]').content;\n\n    this.setState({\n      vote: this.state.vote +1,\n    })\n    this.props.likeStory(this.state, valueCSRF);\n  }\n\n  render () {\n\n    // let currentStoryId = this.props.story.id\n    let currentStoryId = (this.props.story ? this.props.story.id : -1)\n\n    return (\n      <div>\n        <Card body>\n            <Link to={`${this.props.story ? \"/comments/\" + this.props.story.id : 'stories'}`}> {this.props.story ? this.props.story.title : \"This Story is missing\"}</Link>\n\n            <Button variant=\"light\">\n              Likes: {this.props.like + this.state.vote}\n            </Button>\n\n            <Button variant=\"light\">\n              <form onSubmit = {this.handleOnClick}>\n                <input type=\"submit\" value = \"upVote\"/>\n              </form>\n            </Button>\n\n            {/*\n              <Button variant=\"light\">\n              <form onSubmit = {this.handleOnClick}>\n              <input type=\"submit\" value = \"downVote\"/>\n              </form>\n              </Button>\n              */}\n\n            {/*\n              <Button variant=\"light\">\n              ID: {this.props.story.id}\n              </Button>\n              */}\n        </Card>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    vote: state.likeStoryReducer.vote\n  }\n}\n\nexport default connect(mapStateToProps, {likeStory})(StoryCard)\n","export function likeStory(votes, valueCSRF) {\n\n  return dispatch => {\n    dispatch({type: 'UPLOADING_VOTE'});\n    return (\n      fetch('http://localhost:3000/likes', {\n\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'X-CSRF-Token': valueCSRF\n        },\n        body: JSON.stringify(votes),\n\n      })\n      .then(resp => resp.json())\n      .then(vote => {\n        dispatch({type:'ADDING_VOTE', payload: vote})\n      })\n      .catch(function(error) {console.log('There has been a problem with your fetch POST operation: ', error.message);})\n\n    )\n\n\n  }\n}\n","import React from 'react';\nimport logo from '../logo.svg';\n\n// debugger\nexport default function header(props) {\n  return (\n\n    <div>\n      <header className=\"container App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n        <h3>Welcome to News Feed</h3>\n\n        <p>\n        {props.username ? `Hello ${props.username}!` : 'Please sign in to add your comments or post your own stories.' }\n        </p>\n\n      </header>\n    </div>\n  )\n}\n","export default function currentUserFetch() {\n  return dispatch => {\n    dispatch({type: 'LOADING_USER'});\n\n    return (\n      fetch('http://localhost:3000/api/v1/current_user')\n      .then(resq => resq.json())\n      .then(user => {\n        dispatch({type: 'FETCHING_USER', payload: user })\n      })\n      .catch(function(error) {console.log('There has been a problem with your posts fetch operation:', error.message)})\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchStories } from '../actions/storyAction';\nimport { Link } from 'react-router-dom';\nimport StoriesList from '../components/storiesList';\nimport StoryCard from '../components/StoryCard';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Header from '../components/header';\nimport currentUserFetch from '../actions/currentUserAction';\nimport { likeAllOnStoriesFetch } from '../actions/likeAllOnStoriesFetchAction';\n\nclass Stories extends Component {\n\n  componentDidMount() {\n    this.props.fetchStories();\n    this.props.currentUserFetch();\n    this.props.likeAllOnStoriesFetch();\n  }\n\n  render() {\n    const list = this.props.stories.map((story, index) => {\n      let foundLike = 0;\n      if (this.props.allLikes === true ) {\n        foundLike = this.props.allLikes.find(like => parseInt(like.item_id) === (story ? story.id : -1))\n      }\n\n      return (\n      <li key={index}>\n        <StoryCard story = {story} like = {foundLike ? foundLike.vote : 0 } />\n      </li>\n      )\n    })\n\n    return (\n      <div>\n        <Header username = {this.props.user.username}/>\n        <StoriesList list={list} loading={this.props.loading} />\n      </div>\n    )\n  }\n}\n\nconst mapStatetoProps = state => {\n\n  return {\n    stories: state.storyReducer.stories,\n    loading: state.storyReducer.loading,\n    user: state.currentUserReducer.user,\n    allLikes: state.likeStoryReducer.allLikes\n  }\n}\nexport default connect(mapStatetoProps, {fetchStories, currentUserFetch, likeAllOnStoriesFetch})(Stories)\n","export function fetchStories() {\n  return (dispatch) => {\n    dispatch({type: 'LOADING_STORIES'});\n    return (\n      fetch('https://hacker-news.firebaseio.com/v0/askstories.json?print=pretty')\n      .then(response => response.json())\n      .then(storyIds => {\n        storyIds.map(function(id) {\n          return (\n            fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json?print=pretty`)\n            .then(response => response.json())\n            .then(story => {\n              dispatch({type: 'FETCHING_STORIES', payload: story})\n              })\n          )\n        })\n      })\n    )\n  }\n}\n","export function likeAllOnStoriesFetch(itemId) {\n\n  return dispatch => {\n    dispatch({type: 'LOADING_VOTE'});\n    return (\n      fetch(`http://localhost:3000/likes`)\n      .then(resp => resp.json())\n      .then(likes => {\n        // debugger\n        dispatch({type:'FETCHING_AllLIKES', payload: likes\n      })})\n      .catch(function(error) {console.log('There has been a problem with your fetch GET operation: ', error.message);})\n\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { commentUpload } from '../actions/commentAction';\n// import Button from 'react-bootstrap/Button'\n\nclass NewComment extends Component {\n\n  state = {\n    story_comment: \"\"     //need to be the same as database column\n  }\n\n  handleOnChange = event => {\n    if (this.props.storyId) {\n      this.setState({\n        [event.target.name]: event.target.value,\n        story_id: this.props.storyId\n      })\n    }\n    else if (this.props.postId) {\n      this.setState({\n        [event.target.name]: event.target.value,\n        post_id: this.props.postId\n      })\n    }\n  }\n\n  handleOnSubmit = event => {\n    event.preventDefault();\n    let valueCSRF = document.querySelector('meta[name=\"csrf-token\"]').content;\n    this.props.commentUpload(this.state, valueCSRF);\n    this.setState({\n      story_comment: ''\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleOnSubmit}>\n          <label>Please add your comment</label>\n          <br></br>\n          <textarea value={this.state.story_comment} name=\"story_comment\" rows=\"5\" cols=\"60\" onChange={this.handleOnChange}></textarea>\n          <br></br>\n          <button type=\"submit\">Submit</button>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default connect(null, {commentUpload})(NewComment)\n","export function commentUpload(storyComment, valueCSRF) {\n\n  return dispatch => {\n    dispatch({type: 'UPLOADING_COMMENT'});\n    return (\n      fetch('http://localhost:3000/comments', {\n\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'X-CSRF-Token': valueCSRF\n      },\n      body: JSON.stringify(storyComment),\n      // credentials: 'same-origin'  //might not need this.\n\n      })\n      .then(resp => resp.json())\n      .then(comment => {\n        dispatch({type:'ADDING_COMMENT', payload: comment})\n      })\n      .catch(function(error) {console.log('There has been a problem with your fetch POST operation: ', error.message);})\n\n    )\n  }\n}\n","import React from 'react';\n\nexport default function commentList(props)  {\n    return (\n      <div>\n        <h4>Comments - Current User and other users</h4>\n        <ul>\n          {props.displayComments}\n        </ul>\n      </div>\n    )\n}\n","import React from 'react';\nimport Card from 'react-bootstrap/Card'\n\nexport default function StoryShow(props) {\n\n  if (props.story.time) {\n    let storyTime = new Date(props.story.time * 1000);\n    let timeString = storyTime.toLocaleString();\n\n    return (\n      <Card body>\n        <Card.Header>{props.story.title}</Card.Header>\n        <Card.Text>{props.story.text}</Card.Text>\n        <Card.Footer>Published at: {timeString}</Card.Footer>\n      </Card>\n    )\n  } else {\n    let timeString = \"Time is not available\";\n\n    return (\n      <div>\n        <h4>{props.story.title}</h4>\n        <p>{props.story.text}</p>\n        <p>Time: {timeString}</p>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport Card from 'react-bootstrap/Card'\n\nexport default function postShow(props) {\n\n  if (props.post.created_at) {\n    let postTime = new Date(props.post.created_at);\n    let timeString = postTime.toLocaleString();\n\n    return (\n      <Card body>\n        <Card.Header>{props.post.title}</Card.Header>\n        <Card.Text>{props.post.content}</Card.Text>\n        <Card.Footer>Published at: {timeString}</Card.Footer>\n      </Card>\n    )\n  } else {\n    let timeString = \"Time is not available\";\n\n    return (\n      <div>\n        <h4>{props.post.title}</h4>\n        <p>{props.post.content}</p>\n        <p>Time: {timeString}</p>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport NewComment from '../components/NewComment';\nimport CommentList from '../components/commentList';\nimport StoryShow from '../components/storyShow';\nimport PostShow from '../components/postShow';\nimport { connect } from 'react-redux';\nimport { fetchSingleStory } from '../actions/singleStoryAction';\nimport { fetchSinglePost } from '../actions/singlePostAction';\nimport fetchComments from '../actions/commentFetchAction'\n\nclass Comments extends Component {\n\n  componentDidMount() {\n    if (this.props.match.path === \"/comments/:id\") {\n      this.props.fetchSingleStory(this.props.match.params.id);\n      this.props.fetchComments();\n    } else if (this.props.match.path === \"/postcomments/:id\"){\n      this.props.fetchSinglePost(this.props.match.params.id);\n      this.props.fetchComments();\n    }\n  }\n\n  reloadSingleStory = () => {\n\n    const story = this.props.singleStory\n\n    const storyComments = this.props.comments.filter(comment => parseInt(comment.story_id) ===  story.id)\n\n    const displayComments = storyComments.slice(0).reverse().map((comment, index) => {\n\n      let commentDate = new Date(comment.created_at);\n      let dateString = commentDate.toLocaleTimeString();\n\n      return (\n        <li key={index}>\n          Comment: {comment.story_comment};\n          User: {comment.user.username};\n          Created at: {dateString}\n        </li>\n      )\n    })\n\n    if (story) {\n      return  (\n        <div>\n          <StoryShow story={story} />\n          <hr></hr>\n          <NewComment storyId={story.id} />\n          <hr></hr>\n          <CommentList displayComments={displayComments} />\n          <hr></hr>\n        </div>\n      )\n    } else {\n      return (\n        <div> ...loading </div> //need another condition to remind user back to storylist.\n      )\n    }\n  }\n\n  reloadSinglePost = () => {\n\n    const post = this.props.singlePost\n    const postComments = this.props.comments.filter(comment => parseInt(comment.post_id) ===  post.id)\n\n    const displayComments = postComments.slice(0).reverse().map((comment, index) => {\n\n      let commentDate = new Date(comment.created_at);\n      let dateString = commentDate.toLocaleTimeString();\n\n      return (\n        <li key={index}>\n          Comment: {comment.story_comment};\n          User: {comment.user.username};\n          Created at: {dateString}\n        </li>\n      )\n    })\n\n    if (post) {\n      return  (\n        <div>\n          <PostShow post={post} />\n          <hr></hr>\n          <NewComment postId={post.id} />\n          <hr></hr>\n          <CommentList displayComments={displayComments} />\n          <hr></hr>\n        </div>\n      )\n    } else {\n      return (\n        <div> ...loading </div> //need another condition to remind user back to storylist.\n      )\n    }\n  }\n\n  render() {\n    if (this.props.match.path === \"/comments/:id\") {\n      return (\n        <div>\n          {this.reloadSingleStory()}\n        </div>\n      )\n    } else if (this.props.match.path === \"/postcomments/:id\") {\n      return (\n        <div>\n          {this.reloadSinglePost()}\n        </div>\n      )\n    }\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    stories: state.storyReducer.stories,\n    singleStory: state.storyReducer.singleStory,\n    comments: state.commentReducer.comments,\n    singlePost: state.postReducer.singlePost\n  }\n}\n\nexport default connect(mapStateToProps, {fetchSingleStory, fetchComments, fetchSinglePost})(Comments)\n","export function fetchSingleStory(storyId) {\n  return (dispatch) => {\n    dispatch({type: 'LOADING_SINGLE_STORY'});\n    return (\n      fetch(`https://hacker-news.firebaseio.com/v0/item/${storyId}.json?print=pretty`)\n      .then(resp => resp.json())\n      .then(story => {\n        dispatch({type: 'FETCH_SINGLE_STORY', payload: story})\n      })\n    )\n  }\n}\n","export default function fetchComments() {\n  return dispatch => {\n    dispatch({type: 'LOADING_COMMENTS'});\n    return (\n      fetch('http://localhost:3000/comments')\n        .then(resp => resp.json())\n        .then(comments => dispatch({type: 'FETCHING_COMMENTS', payload: comments}))\n        .catch(function(error) {console.log('There has been a problem with your fetch GET operation: ', error.message);})\n    )\n  }\n}\n","export function fetchSinglePost(postId) {\n  return (dispatch) => {\n    dispatch({type: 'LOADING_SINGLE_POST'});\n    return (\n      fetch(`http://localhost:3000/api/v1/posts/${postId}`)\n      .then(resp => resp.json())\n      .then(post => {\n        dispatch({type: 'FETCH_SINGLE_POST', payload: post})\n      })\n    )\n  }\n}\n","import React from 'react';\nimport { NavLink } from 'react-router-dom'\n\nconst linkStyle = {\n  width: '100px',\n  padding: '12px',\n  margin: '0 6px 6px',\n  background: 'blue',\n  textDecoration: 'none',\n  color: 'white',\n}\n\nexport default function Navbar() {\n    return (\n      <div className={\"nav-links\"}>\n        <NavLink to=\"/\">Hacker News Feed</NavLink>\n        <NavLink to=\"/posts\">Users Posts</NavLink>\n        <NavLink to=\"/newpost\">Post Your Story</NavLink>\n      </div>\n    )\n}\n","export function postUpload(postData, valueCSRF, push) {\n  return dispatch => {\n    dispatch({type: 'LOADING_POST'});\n    return (\n      fetch('http://localhost:3000/api/v1/posts', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'X-CSRF-Token': valueCSRF\n        },\n        body: JSON.stringify(postData),\n      })\n      .then(resp => resp.json())\n      .then(post => {\n        return dispatch({type: 'ADDING_POST', payload: post})\n      })\n      .then(res => push(\"/posts\"))\n      .catch(function(error) {console.log('There has been a problem with your fetch POST operation: ', error.message);})\n    )\n  }\n}\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux'\nimport { postUpload } from '../actions/postCreateAction';\nimport currentUserFetch from '../actions/currentUserAction';\n\n\nclass NewPost extends Component {\n  state = {\n    content: '',\n    title: ''\n  }\n\n  componentDidMount() {\n    this.props.currentUserFetch();\n  }\n\n  handleOnChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  handleOnSubmit = event => {\n    event.preventDefault();\n    let valueCSRF = document.querySelector('meta[name=\"csrf-token\"]').content;\n    this.props.postUpload(this.state, valueCSRF, this.props.history.push);\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleOnSubmit}>\n          <h5>Your Post Title</h5>\n          <input type=\"text\" name=\"title\" onChange={this.handleOnChange} value={this.state.title}></input>\n          <br></br>\n          <label>Post Content</label>\n          <br></br>\n          <textarea rows=\"5\" cols=\"60\" name=\"content\" onChange={this.handleOnChange} value={this.state.content}></textarea>\n\n          <br></br>\n          <button variant=\"outline-primary\" type=\"submit\">Submit</button>\n        </form>\n\n        <h6>\n          {this.props.userPosts.length !== 0 ? (`Your Post is successfully Published`) : `Hi ${this.props.user.username}, Please click on Submit to Publish your Post`}\n        </h6>\n\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    userPosts: state.postReducer.userPosts,\n    user: state.currentUserReducer.user\n  }\n}\n\nexport default connect(mapStateToProps, {postUpload, currentUserFetch})(NewPost)\n","import React from 'react';\n\nexport default function postList(props) {\n    return (\n      <div>\n        {props.loading ? \"...Posts Loading\" : props.posts}\n\n        {/*<h6>\n            {props.userPosts.length !== 0 ? (\"Your Post is successfully Published\" + props.userPosts) : \"Please click on Submit to Publish your Post\"}\n          </h6> */}\n      </div>\n    )\n}\n","import React, { Component } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { likePost } from '../actions/likePostAction';\nimport { deletePost } from '../actions/postDeleteAction';\nimport { editPost } from '../actions/postEditAction';\n\nclass PostCard extends Component{\n\n  handleOnClick = event => {\n    event.preventDefault();\n    let valueCSRF = document.querySelector('meta[name=\"csrf-token\"]').content;\n\n\n    let voteValue = {vote: 1, id: this.props.post.id}\n    this.props.likePost(this.props.post.id, voteValue, valueCSRF, );\n  }\n\n  handleOnClickDownVote = event => {\n    event.preventDefault();\n    let valueCSRF = document.querySelector('meta[name=\"csrf-token\"]').content;\n\n    if (this.props.post.like === 0) {\n      let voteValue = {vote: 0, id: this.props.post.id}\n      this.props.likePost(this.props.post.id, voteValue, valueCSRF);\n    } else {\n      let voteValue = {vote: -1, id: this.props.post.id}\n      this.props.likePost(this.props.post.id, voteValue, valueCSRF);\n    }\n  }\n\n  // handleOnClickDownVote = event => {\n  //   event.preventDefault();\n  //   let valueCSRF = document.querySelector('meta[name=\"csrf-token\"]').content;\n  //\n  //   if (this.props.likes === 0) {\n  //     this.setState({\n  //       vote: 0,\n  //     })\n  //   } else {\n  //     this.setState({\n  //       vote: this.state.vote - 1,\n  //     })\n  //   }\n  //   let voteValue = {vote: -1, id: this.props.post.id}\n  //   this.props.likePost(this.props.post.id, voteValue, valueCSRF);\n  // }\n\n  handleOnClickDelete = event => {\n    event.preventDefault();\n    let valueCSRF = document.querySelector('meta[name=\"csrf-token\"]').content;\n\n    this.props.deletePost(this.props.post.id, this.props.post, valueCSRF);\n  }\n\n  handleOnClickEdit = event => {\n    event.preventDefault();\n    // let valueCSRF = document.querySelector('meta[name=\"csrf-token\"]').content;\n    this.props.editPost(this.props.post.id, this.props.push);\n  }\n\n  render() {\n    return (\n        <Card body border=\"light\">\n          <Card.Header>\n            Created at: {this.props.dateString}; By: {this.props.post.user.username}; Post Id: {this.props.post.id}\n          </Card.Header>\n          <Card.Title>{this.props.post.title}</Card.Title>\n          <Card.Text>{this.props.post.content}</Card.Text>\n\n        <Button variant=\"light\">\n            <Link to={`${this.props.post ? \"/postcomments/\" + this.props.post.id : 'posts'}`}>\n              {this.props.post ? \"Add Comments\" : \"This Post is missing\"}\n            </Link>\n          </Button>\n\n          <Button variant=\"light\">\n            <form onSubmit = {this.handleOnClick}>\n              <input type=\"submit\" value=\"upVote\"/>\n            </form>\n          </Button>\n\n          <Button variant=\"light\">\n            <form onSubmit = {this.handleOnClickDownVote}>\n              <input type=\"submit\" value=\"downVote\"/>\n            </form>\n          </Button>\n\n          <Button variant=\"light\">\n            Likes: {this.props.post.like}\n          </Button>\n\n{/*\n\n  <Button variant=\"light\">\n  <form onSubmit = {this.handleOnClickEdit}>\n  <input type=\"submit\" value=\"Edit Post\"/>\n  </form>\n  </Button>\n  */}\n\n          <Button variant=\"light\">\n            <form onSubmit = {this.handleOnClickDelete}>\n              <input type=\"submit\" value=\"Delete Post\"/>\n            </form>\n          </Button>\n        </Card>\n    )\n  }\n}\n\n\nexport default connect(null, {likePost, deletePost, editPost})(PostCard);\n","export function likePost(postId, voteValue, valueCSRF) {\n\n  return dispatch => {\n    dispatch({type: 'UPLOADING_POSTLIKE'});\n    return (\n      fetch(`http://localhost:3000/api/v1/posts/${postId}`, {\n\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'X-CSRF-Token': valueCSRF\n      },\n      body: JSON.stringify(voteValue),\n      // credentials: 'same-origin'  //might not need this.\n\n      })\n      .then(resp => resp.json())\n      .then(post => {\n        // console.log(post) //use log to track the fetch request. \n        dispatch({type:'FETCHING_POSTLIKE', payload: post})\n      })\n      .catch(function(error) {console.log('There has been a problem with your fetch POST operation: ', error.message);})\n\n    )\n  }\n}\n","export function deletePost(postId, postValue, valueCSRF) {\n  return dispatch => {\n    dispatch({type: 'LOADING_DELETEPOST'});\n    return (\n      fetch(`http://localhost:3000/api/v1/posts/${postId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'X-CSRF-Token': valueCSRF\n        },\n        body: JSON.stringify(postValue),\n      })\n      // .then(resp => resp.json())\n      .then( res => {dispatch({type: 'DELETING_POST', payload: postId})})\n      .catch(function(error) {console.log('There has been a problem with your fetch DELETE operation: ', error.message);})\n    )\n  }\n}\n","export function editPost(postId, push) {\n  return (dispatch) => {\n    dispatch({type: 'LOADING_SINGLE_POST'});\n    return (\n      fetch(`http://localhost:3000/api/v1/posts/${postId}`)\n      .then(resp => resp.json())\n      .then(post => {\n        dispatch({type: 'FETCH_SINGLE_POST', payload: post})\n      })\n      .then(res => push(`/posts/${postId}/edit`))\n      .catch(function(error) {console.log('There has been a problem with your fetch POST operation: ', error.message);})\n\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport NewPost from '../components/newPost';\nimport PostList from '../components/PostList';\nimport { connect } from 'react-redux';\nimport fetchPosts from '../actions/postsFetchAction';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport { Link } from 'react-router-dom';\nimport PostCard from '../components/PostCard'\n\nclass Posts extends Component {\n\n  componentDidMount() {\n    this.props.fetchPosts();\n  }\n\n  render() {\n\n    const userPosts = this.props.userPosts.map((post, index) => <li key={post.id}>Title: {post.title}; Content: {post.content} Created at: {post.created_at}</li>)\n\n    const posts = this.props.posts.slice(0).reverse().sort((p1, p2) => p2.like - p1.like).map((post, index) => {\n      let postDate = new Date(post.created_at)\n      let dateString = postDate.toDateString()\n\n      return(\n        <div key={post.id}>\n          <PostCard post={post} postDate={postDate} dateString = {dateString} push = {this.props.history.push}/>\n        </div>\n      )\n    })\n\n    return (\n      <div>\n        <PostList posts={posts} userPosts={userPosts} loading={this.props.loading} />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    userPosts: state.postReducer.userPosts,\n    posts: state.postReducer.posts,\n    loading: state.postReducer.loading\n  }\n}\n\nexport default connect(mapStateToProps, {fetchPosts})(Posts)\n","export default function fetchPosts() {\n  return dispatch => {\n    dispatch({type: 'LOADING_POSTS'});\n    return (\n      fetch('http://localhost:3000/api/v1/posts')\n      .then(resq => resq.json())\n      .then(posts => {\n\n        dispatch({type: 'FETCHING_POSTS', payload: posts })\n      })\n      .catch(function(error) {console.log('There has been a problem with your posts fetch operation:', error.message)})\n    )\n  }\n}\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux'\nimport { postUpload } from '../actions/postCreateAction';\nimport currentUserFetch from '../actions/currentUserAction';\n\n\nclass PostEdit extends Component {\n  state = {\n    content: '',\n    title: ''\n  }\n\n  componentDidMount() {\n    this.props.currentUserFetch();\n  }\n\n  handleOnChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n  // handleOnSubmit = event => {\n  //   event.preventDefault();\n  //   let valueCSRF = document.querySelector('meta[name=\"csrf-token\"]').content;\n  //   this.props.postUpload(this.state, valueCSRF, this.props.history.push);\n  // }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleOnSubmit}>\n          <h5>Edit Your Post Title</h5>\n          <input type=\"text\" name=\"title\" onChange={this.handleOnChange} value={this.state.title}></input>\n          <br></br>\n          <label>Edit Post Content</label>\n          <br></br>\n          <textarea rows=\"5\" cols=\"60\" name=\"content\" onChange={this.handleOnChange} value={this.state.content}></textarea>\n\n          <br></br>\n          <button variant=\"outline-primary\" type=\"submit\">Edit Post</button>\n        </form>\n\n        <h6>\n          {this.props.userPosts.length !== 0 ? (`Your Post is successfully Published`) : `Hi ${this.props.user.username}, Please Submit after editing your Post`}\n        </h6>\n\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    userPosts: state.postReducer.userPosts,\n    user: state.currentUserReducer.user\n  }\n}\n\nexport default connect(mapStateToProps, {postUpload, currentUserFetch})(PostEdit)\n","import React from 'react';\nimport logo from './logo.svg';\nimport {\n  HashRouter as Router,\n  Route\n} from 'react-router-dom';\nimport PostListTutorial from './components/PostListTutorial';\nimport './App.css';\nimport NewPostTutorial from './components/NewPostTutorial';\n\nimport Stories from './containers/Stories';\nimport Comments from './containers/Comments';\nimport Navbar from './components/navbar';\nimport Posts from './containers/Posts';\nimport NewPost from './components/newPost';\nimport PostEdit from './components/PostEdit';\nimport NewComment from './components/NewComment'\nimport Container from 'react-bootstrap/Container';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar />\n        <br></br>\n        <Container>\n          <Route exact path=\"/\" component={Stories} />\n          <Route exact path=\"/posts\" component={Posts} />\n          <Route exact path=\"/newpost\" component={NewPost} />\n          <Route exact path=\"/posts/:id/edit\" component={PostEdit} />\n          <Route exact path='/comments/:id' component={Comments} />   {/* :id is story_id of the comment */}\n          <Route exact path='/postcomments/:id' component={Comments} />   {/* :id is post_id of the comment */}\n        </Container>\n\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { combineReducers} from 'redux';\nimport commentReducer from './commentReducer';\nimport storyReducer from './storyReducer';\nimport postReducer from './postReducer';\nimport currentUserReducer from './currentUserReducer';\nimport likeStoryReducer from './likeStoryReducer';\n\nexport default combineReducers({\n  commentReducer, storyReducer, postReducer, currentUserReducer, likeStoryReducer\n})\n","export default function commentReducer(state={comments: [], loading: false}, action) {\n  switch(action.type) {\n\n    case 'UPLOADING_COMMENT':\n      return {...state, loading:true};\n\n    case 'ADDING_COMMENT':\n      return {comments: [...state.comments, action.payload], loading: false}\n\n    case 'LOADING_COMMENTS':\n      return {...state, loading: true};\n\n    case 'FETCHING_COMMENTS':\n      return {comments: action.payload, loading: false}\n    default:\n      return state;\n  }\n}\n","export default function storyReducer(state={stories: [], singleStory: [], loading: false}, action) {\n  switch(action.type) {\n\n    case 'LOADING_STORIES':\n      return {...state, loading:true};\n\n    case 'FETCHING_STORIES':\n      return {...state, stories: [...state.stories, action.payload], loading: false};\n\n    case 'LOADING_SINGLE_STORY':\n      return {...state, loading:true}\n\n    case 'FETCH_SINGLE_STORY':\n      return {...state, singleStory: action.payload, loading: false}\n\n    default:\n      return state;\n  }\n}\n","export default function postReducer(state={userPosts: [], posts: [], singlePost: [], loading:false}, action) {\n  switch(action.type) {\n\n    case 'LOADING_POST':\n      return {...state, loading:true};\n\n    case 'ADDING_POST':\n      return {...state, userPosts: [...state.userPosts, action.payload], loading:false};\n\n    case 'LOADING_POSTS':\n      return {...state, loading:true};\n\n    case 'FETCHING_POSTS':\n      return {...state, posts: action.payload, loading: false};\n\n    case 'LOADING_SINGLE_POST':\n      return {...state, loading:true}\n\n    case 'FETCH_SINGLE_POST':\n      return {...state, singlePost: action.payload, loading: false}\n\n    case 'LOADING_DELETEPOST':\n      return {...state, loading:true};\n\n    case 'DELETING_POST':\n      return {...state, posts: state.posts.filter(post => post.id !== action.payload), loading:false};\n\n    case 'UPLOADING_POSTLIKE':\n      return {...state, loading:true};\n\n    case 'FETCHING_POSTLIKE':\n      // debugger\n      return {...state, posts: state.posts.map(post => post.id === action.payload.id ? action.payload : post), loading:false};\n\n    default:\n      return state;\n  }\n}\n","export default function currentUserReducer(state={user: [], loading: false}, action) {\n  switch(action.type) {\n\n    case 'LOADING_USER':\n      return {...state, loading: true};\n\n    case 'FETCHING_USER':\n      return {user: action.payload, loading: false}\n    default:\n      return state;\n  }\n}\n","export default function likeStoryReducer(state={vote: 0, allLikes: [], loading: false}, action) {\n  switch(action.type) {\n\n    case 'UPLOADING_VOTE':\n      return {...state, loading:true};\n\n    case 'ADDING_VOTE':\n      return {...state, vote: state.vote + 1, loading: false}\n\n    case 'FETCHING_AllLIKES':\n    return {...state, allLikes: action.payload, loading: false}\n\n    // return {...state, allLikes: {...state.allLikes, action.payload.item_id: action.payload}, loading: false}\n\n    default:\n      return state;\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers'\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer,  composeEnhancer(applyMiddleware(thunk)),);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}